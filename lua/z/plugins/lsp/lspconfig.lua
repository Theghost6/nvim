return {
  {
    "neovim/nvim-lspconfig",
    event = { "BufReadPre", "BufNewFile" }, -- Lazy-load khi m·ªü file
    dependencies = {
      { "nvimdev/lspsaga.nvim", event = "LspAttach" },
      { "ErichDonGubler/lsp_lines.nvim", branch = "main", cond = function() return pcall(require, "lsp_lines") end },
      { "Saghen/blink.cmp", cond = function() return pcall(require, "blink.cmp") end },
      { "nvim-telescope/telescope.nvim", dependencies = { "nvim-lua/plenary.nvim" } },
    },
    config = function()
      local lspconfig = require("lspconfig")
      local keymap = vim.keymap

      -- T√≠ch h·ª£p blink.cmp capabilities n·∫øu c√≥
      local capabilities
      if pcall(require, "blink.cmp") then
        capabilities = require("blink.cmp").get_lsp_capabilities()
      else
        capabilities = vim.lsp.protocol.make_client_capabilities()
      end

      -- Thi·∫øt l·∫≠p diagnostics
      vim.diagnostic.config({
        virtual_text = false,
        virtual_lines = false, -- T·∫Øt lsp_lines m·∫∑c ƒë·ªãnh
        signs = {
          text = {
            [vim.diagnostic.severity.ERROR] = "ÔÅó",
            [vim.diagnostic.severity.WARN] = "ÔÅ±",
            [vim.diagnostic.severity.HINT] = "ÔÉ´",
            [vim.diagnostic.severity.INFO] = "ÔÅö",
          },
        },
        update_in_insert = false, -- Gi·∫£m c·∫≠p nh·∫≠t diagnostics khi g√µ
      })

      -- Toggle lsp_lines
      if pcall(require, "lsp_lines") then
        keymap.set("n", "<Leader>;", function()
          require("lsp_lines").toggle()
        end, { desc = "Toggle lsp_lines" })
      end

      -- on_attach chung
      local on_attach = function(client, bufnr)
        local opts = { noremap = true, silent = true, buffer = bufnr }
        local mappings = {
          { "n", "gr", "<cmd>Telescope lsp_references<CR>", "Hi·ªÉn th·ªã tham chi·∫øu LSP" },
          { { "n", "v" }, "<leader>ca", vim.lsp.buf.code_action, "Xem c√°c h√†nh ƒë·ªông m√£ c√≥ s·∫µn" },
          { "n", "<leader>rn", vim.lsp.buf.rename, "ƒê·ªïi t√™n th√¥ng minh" },
          { "n", "<leader>D", "<cmd>Telescope diagnostics bufnr=0<CR>", "Hi·ªÉn th·ªã ch·∫©n ƒëo√°n l·ªói trong b·ªô ƒë·ªám" },
          { "n", "<leader>d", vim.diagnostic.open_float, "Hi·ªÉn th·ªã ch·∫©n ƒëo√°n l·ªói tr√™n d√≤ng" },
          { "n", "[d", vim.diagnostic.goto_prev, "ƒêi ƒë·∫øn ch·∫©n ƒëo√°n l·ªói tr∆∞·ªõc ƒë√≥" },
          { "n", "]d", vim.diagnostic.goto_next, "ƒêi ƒë·∫øn ch·∫©n ƒëo√°n l·ªói ti·∫øp theo" },
          { "n", "K", vim.lsp.buf.hover, "Hi·ªÉn th·ªã t√†i li·ªáu" },
          { "n", "<leader>rs", ":LspRestart<CR>", "Kh·ªüi ƒë·ªông l·∫°i LSP" },
        }
        for _, map in ipairs(mappings) do
          keymap.set(map[1], map[2], map[3], vim.tbl_extend("force", opts, { desc = map[4] }))
        end
      end

      -- C·∫•u h√¨nh c√°c LSP server
      local servers = {
        -- Gi·ªØ ts_ls cho React/JavaScript
        ts_ls = {
          filetypes = { "javascript", "javascriptreact", "javascript.jsx", "typescript", "typescriptreact", "typescript.tsx", "html" },
          root_dir = lspconfig.util.root_pattern("package.json", "tsconfig.json", "jsconfig.json", ".git"),
          single_file_support = true,
          init_options = {
            preferences = {
              disableSuggestions = true,
              includeCompletionsForModuleExports = true, -- H·ªó tr·ª£ module c·ª•c b·ªô
              includeFileExtensions = { ".jsx", ".js", ".tsx", ".ts" }, -- Nh·∫≠n di·ªán file JSX
            },
          },
        },
        eslint = {
          settings = { workingDirectory = { mode = "auto" }, format = { enable = true }, lintTask = { enable = true } },
          on_attach = function(client, bufnr)
            on_attach(client, bufnr)
            vim.api.nvim_create_autocmd("BufWritePre", {
              buffer = bufnr,
              command = "EslintFixAll",
            })
          end,
          root_dir = lspconfig.util.root_pattern(".eslintrc", ".eslintrc.js", ".eslintrc.json", "package.json"),
        },
        html = {
          init_options = { configurationSection = { "html", "css", "javascript" }, embeddedLanguages = { css = true, javascript = true }, provideFormatter = true },
        },
        cssls = {},
        stylelint_lsp = {
          filetypes = { "css", "scss", "less" },
          root_dir = lspconfig.util.root_pattern(".stylelintrc", ".stylelintrc.json", "package.json"),
          settings = { stylelintplus = { autoFixOnSave = true, autoFixOnFormat = true } },
        },
        -- Gi·ªØ emmet_ls cho React
        emmet_ls = {
          filetypes = { "css", "html", "javascriptreact", "typescriptreact" },
          init_options = { html = { options = { ["bem.enabled"] = true } } },
        },
        -- Gi·ªØ pyright cho Python
        pyright = {
          filetypes = { "python" },
          root_dir = lspconfig.util.root_pattern(".git", "pyproject.toml", "setup.py", "setup.cfg", "requirements.txt", "pyrightconfig.json"),
          settings = {
            pyright = {
              disableOrganizeImports = false,
              analysis = {
                autoSearchPaths = true,
                useLibraryCodeForTypes = true,
                diagnosticMode = "workspace",
              },
            },
          },
        },
        lua_ls = {
          settings = {
            Lua = {
              completion = { workspaceWord = true },
              diagnostics = { globals = { "vim" } },
              workspace = {
                library = {
                  [vim.fn.expand("$VIMRUNTIME/lua")] = true,
                  [vim.fn.stdpath("config") .. "/lua"] = true,
                },
              },
            },
          },
        },
        -- X√≥a clangd v√† jdtls n·∫øu kh√¥ng d√πng C/C++ ho·∫∑c Java
        -- clangd = {},
        -- jdtls = {
        --   cmd = { "jdtls" },
        --   root_dir = lspconfig.util.root_pattern("gradlew", ".git", "mvnw"),
        -- },
      }

      -- Thi·∫øt l·∫≠p t·∫•t c·∫£ server
      for server, config in pairs(servers) do
        config.capabilities = vim.tbl_deep_extend("force", capabilities, config.capabilities or {})
        config.on_attach = config.on_attach or on_attach
        lspconfig[server].setup(config)
      end
    end,
  },

  -- lspsaga.nvim
  {
    "nvimdev/lspsaga.nvim",
    event = "LspAttach",
    config = function()
      require("lspsaga").setup({
        ui = { border = "rounded", code_action = "üí°", diagnostic = "üêû" },
        lightbulb = { enable = false }, -- T·∫Øt lightbulb ƒë·ªÉ gi·∫£m t·∫£i
        diagnostic = { max_height = 0.6, max_width = 0.7 }, -- Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc c·ª≠a s·ªï diagnostic
      })
    end,
  },
}
